{
  "title": "TypeChecker",
  "name": "typechecker",
  "version": "6.3.0",
  "description": "Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)",
  "homepage": "https://github.com/bevry/typechecker",
  "license": "MIT",
  "keywords": [
    "array",
    "assert",
    "assertion",
    "async function",
    "async-function",
    "async",
    "asyncFunction",
    "bool",
    "boolean",
    "check-type",
    "check",
    "checking",
    "class-identifier",
    "class-instance",
    "class",
    "compare",
    "conventional class",
    "conventional-class",
    "conventionalClass",
    "date",
    "define-type",
    "empty array",
    "empty keys",
    "empty map",
    "empty plain object",
    "empty-array",
    "empty-keys",
    "empty-map",
    "empty-plain-object",
    "empty",
    "emptyArray",
    "emptyKeys",
    "emptyMap",
    "emptyPlainObject",
    "error",
    "function",
    "get object type",
    "get type",
    "get-object-type",
    "get-type",
    "getObjectType",
    "getType",
    "instanceof",
    "is arguments",
    "is array",
    "is async function",
    "is async",
    "is bool",
    "is boolean",
    "is class",
    "is conventional class",
    "is date",
    "is empty array",
    "is empty keys",
    "is empty map",
    "is empty plain object",
    "is empty weak map",
    "is error",
    "is function",
    "is map",
    "is native class",
    "is null",
    "is nullish",
    "is number",
    "is object",
    "is plain object",
    "is regexp",
    "is string",
    "is sync function",
    "is sync",
    "is undefined",
    "is weak map",
    "is-arguments",
    "is-array",
    "is-async-function",
    "is-async",
    "is-bool",
    "is-boolean",
    "is-class",
    "is-conventional-class",
    "is-date",
    "is-empty-array",
    "is-empty-keys",
    "is-empty-map",
    "is-empty-plain-object",
    "is-empty-weak-map",
    "is-error",
    "is-function",
    "is-map",
    "is-native-class",
    "is-null",
    "is-nullish",
    "is-number",
    "is-object",
    "is-plain-obj",
    "is-plain-object",
    "is-regexp",
    "is-string",
    "is-sync-function",
    "is-sync",
    "is-undefined",
    "is-weak-map",
    "is",
    "isArguments",
    "isArray",
    "isAsyncFunction",
    "isBool",
    "isBoolean",
    "isClass",
    "isConventionalClass",
    "isDate",
    "isEmptyArray",
    "isEmptyKeys",
    "isEmptyMap",
    "isEmptyPlainObject",
    "isEmptyWeakMap",
    "isError",
    "isFunction",
    "isMap",
    "isNativeClass",
    "isNull",
    "isNullish",
    "isNumber",
    "isObject",
    "isRegExp",
    "isString",
    "isSync",
    "isSyncFunction",
    "isUndefined",
    "isWeakMap",
    "javascript-type",
    "javascript",
    "keys",
    "kind",
    "map",
    "native class",
    "native-class",
    "native",
    "nativeClass",
    "null",
    "number",
    "object",
    "plain object",
    "plain objects",
    "plain-object",
    "plain-objects",
    "plain",
    "plainObject",
    "primitive-types",
    "primitive",
    "pure",
    "regex",
    "regexp",
    "regular expression",
    "simple",
    "string",
    "sync",
    "syncFunction",
    "test",
    "type-check",
    "type-checker",
    "type-checking",
    "type",
    "typechecker",
    "typeguards",
    "typeof",
    "types",
    "typescript",
    "undefined",
    "util",
    "utility",
    "validate",
    "validation",
    "vanilla",
    "verify",
    "weak map",
    "weak-map",
    "weakMap",
    "what-type"
  ],
  "badges": {
    "list": [
      "travisci",
      "npmversion",
      "npmdownloads",
      "daviddm",
      "daviddmdev",
      "---",
      "githubsponsors",
      "patreon",
      "flattr",
      "liberapay",
      "buymeacoffee",
      "opencollective",
      "crypto",
      "paypal",
      "wishlist"
    ],
    "config": {
      "githubSponsorsUsername": "balupton",
      "buymeacoffeeUsername": "balupton",
      "cryptoURL": "https://bevry.me/crypto",
      "flattrUsername": "balupton",
      "liberapayUsername": "bevry",
      "opencollectiveUsername": "bevry",
      "patreonUsername": "bevry",
      "paypalURL": "https://bevry.me/paypal",
      "wishlistURL": "https://bevry.me/wishlist",
      "travisTLD": "com"
    }
  },
  "funding": "https://bevry.me/fund",
  "author": "2013+ Bevry Pty Ltd <us@bevry.me> (http://bevry.me), 2011-2012 Benjamin Lupton <b@lupton.cc> (http://balupton.com)",
  "maintainers": [
    "Benjamin Lupton <b@lupton.cc> (http://balupton.com)"
  ],
  "contributors": [
    "Benjamin Lupton <b@lupton.cc> (http://balupton.com)",
    "Joe Gesualdo <joegesualdo@gmail.com> (joegesualdo.com)",
    "Sean Fridman <mail@seanfridman.com> (http://seanfridman.com)",
    "Matt Bierner (http://mattbierner.com)",
    "dependabot-preview[bot] (http://github.com/apps/dependabot-preview)"
  ],
  "bugs": {
    "url": "https://github.com/bevry/typechecker/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bevry/typechecker.git"
  },
  "engines": {
    "node": ">=8"
  },
  "editions": [
    {
      "description": "typescript source code with import for modules",
      "directory": "source",
      "entry": "index.ts",
      "tags": [
        "typescript",
        "import"
      ],
      "engines": false
    },
    {
      "description": "typescript compiled for browsers with import for modules",
      "directory": "edition-browsers",
      "entry": "index.js",
      "tags": [
        "javascript",
        "import"
      ],
      "engines": {
        "node": false,
        "browsers": "defaults"
      }
    },
    {
      "description": "typescript compiled for node.js 12 with require for modules",
      "directory": "edition-node-12",
      "entry": "index.js",
      "tags": [
        "javascript",
        "require"
      ],
      "engines": {
        "node": "8 || 10 || 12",
        "browsers": false
      }
    }
  ],
  "types": "source/index.ts",
  "type": "commonjs",
  "main": "edition-node-12/index.js",
  "browser": "edition-browsers/index.js",
  "module": "edition-browsers/index.js",
  "devDependencies": {
    "@babel/cli": "^7.7.5",
    "@babel/core": "^7.7.5",
    "@babel/plugin-proposal-class-properties": "^7.7.4",
    "@babel/plugin-proposal-object-rest-spread": "^7.7.4",
    "@babel/plugin-proposal-optional-chaining": "^7.7.5",
    "@babel/preset-env": "^7.7.6",
    "@babel/preset-typescript": "^7.7.4",
    "@typescript-eslint/eslint-plugin": "^2.11.0",
    "@typescript-eslint/parser": "^2.11.0",
    "assert-helpers": "^5.8.0",
    "babel-plugin-add-module-exports": "^1.0.2",
    "eslint": "^6.7.2",
    "eslint-config-bevry": "^2.3.0",
    "eslint-config-prettier": "^6.7.0",
    "eslint-plugin-prettier": "^3.1.1",
    "kava": "^4.4.0",
    "prettier": "^1.19.1",
    "projectz": "^1.16.0",
    "surge": "^0.21.3",
    "typedoc": "^0.15.4",
    "typescript": "^3.7.3",
    "valid-directory": "^1.5.0"
  },
  "scripts": {
    "our:clean": "rm -Rf ./docs ./edition* ./es2015 ./es5 ./out ./.next",
    "our:compile": "npm run our:compile:edition-browsers && npm run our:compile:edition-node-12",
    "our:compile:edition-browsers": "env BABEL_ENV=edition-browsers babel --extensions \".ts,.tsx\" --out-dir ./edition-browsers ./source",
    "our:compile:edition-node-12": "env BABEL_ENV=edition-node-12 babel --extensions \".ts,.tsx\" --out-dir ./edition-node-12 ./source",
    "our:deploy": "echo no need for this project",
    "our:meta": "npm run our:meta:docs && npm run our:meta:projectz",
    "our:meta:docs": "npm run our:meta:docs:typedoc",
    "our:meta:docs:typedoc": "rm -Rf ./docs && typedoc --mode file --exclude '**/+(*test*|node_modules)' --excludeExternals --name \"$npm_package_name\" --readme ./README.md --out ./docs ./source",
    "our:meta:projectz": "projectz compile",
    "our:release": "npm run our:release:prepare && npm run our:release:check-changelog && npm run our:release:check-dirty && npm run our:release:tag && npm run our:release:push",
    "our:release:check-changelog": "cat ./HISTORY.md | grep v$npm_package_version || (echo add a changelog entry for v$npm_package_version && exit -1)",
    "our:release:check-dirty": "git diff --exit-code",
    "our:release:prepare": "npm run our:clean && npm run our:compile && npm run our:test && npm run our:meta",
    "our:release:push": "git push origin master && git push origin --tags",
    "our:release:tag": "export MESSAGE=$(cat ./HISTORY.md | sed -n \"/## v$npm_package_version/,/##/p\" | sed 's/## //' | awk 'NR>1{print buf}{buf = $0}') && test \"$MESSAGE\" || (echo 'proper changelog entry not found' && exit -1) && git tag v$npm_package_version -am \"$MESSAGE\"",
    "our:setup": "npm run our:setup:install",
    "our:setup:install": "npm install",
    "our:test": "npm run our:verify && npm test",
    "our:verify": "npm run our:verify:directory && npm run our:verify:eslint && npm run our:verify:prettier && npm run our:verify:typescript",
    "our:verify:directory": "npx valid-directory",
    "our:verify:eslint": "eslint --fix --ignore-pattern '**/*.d.ts' --ignore-pattern '**/vendor/' --ignore-pattern '**/node_modules/' --ext .mjs,.js,.jsx,.ts,.tsx ./source",
    "our:verify:prettier": "prettier --write ./source/**",
    "our:verify:typescript": "tsc --noEmit --project tsconfig.json",
    "test": "node ./edition-node-12/test.js"
  },
  "eslintConfig": {
    "extends": [
      "bevry"
    ]
  },
  "prettier": {
    "semi": false,
    "singleQuote": true
  },
  "babel": {
    "env": {
      "edition-browsers": {
        "sourceType": "module",
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": "defaults",
              "modules": "commonjs"
            }
          ],
          "@babel/preset-typescript"
        ],
        "plugins": [
          "@babel/proposal-object-rest-spread",
          "@babel/plugin-proposal-optional-chaining",
          "@babel/proposal-class-properties",
          "add-module-exports"
        ]
      },
      "edition-node-12": {
        "sourceType": "module",
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "node": "12"
              },
              "modules": "commonjs"
            }
          ],
          "@babel/preset-typescript"
        ],
        "plugins": [
          "@babel/proposal-object-rest-spread",
          "@babel/plugin-proposal-optional-chaining",
          "@babel/proposal-class-properties",
          "add-module-exports"
        ]
      }
    }
  }
}
