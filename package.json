{
  "title": "TypeChecker",
  "name": "typechecker",
  "version": "7.18.0",
  "description": "Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)",
  "homepage": "https://github.com/bevry/typechecker",
  "license": "MIT",
  "keywords": [
    "array",
    "assert",
    "assertion",
    "async",
    "async function",
    "async-function",
    "asyncFunction",
    "bool",
    "boolean",
    "browser",
    "check",
    "check-type",
    "checking",
    "class",
    "class-identifier",
    "class-instance",
    "compare",
    "conventional class",
    "conventional-class",
    "conventionalClass",
    "date",
    "define-type",
    "deno",
    "deno-edition",
    "deno-entry",
    "denoland",
    "empty",
    "empty array",
    "empty keys",
    "empty map",
    "empty plain object",
    "empty-array",
    "empty-keys",
    "empty-map",
    "empty-plain-object",
    "emptyArray",
    "emptyKeys",
    "emptyMap",
    "emptyPlainObject",
    "error",
    "es2019",
    "function",
    "get object type",
    "get type",
    "get-object-type",
    "get-type",
    "getObjectType",
    "getType",
    "instanceof",
    "is",
    "is arguments",
    "is array",
    "is async",
    "is async function",
    "is bool",
    "is boolean",
    "is class",
    "is conventional class",
    "is date",
    "is empty array",
    "is empty keys",
    "is empty map",
    "is empty plain object",
    "is empty weak map",
    "is error",
    "is function",
    "is map",
    "is native class",
    "is null",
    "is nullish",
    "is number",
    "is object",
    "is plain object",
    "is regexp",
    "is string",
    "is sync",
    "is sync function",
    "is undefined",
    "is weak map",
    "is-arguments",
    "is-array",
    "is-async",
    "is-async-function",
    "is-bool",
    "is-boolean",
    "is-class",
    "is-conventional-class",
    "is-date",
    "is-empty-array",
    "is-empty-keys",
    "is-empty-map",
    "is-empty-plain-object",
    "is-empty-weak-map",
    "is-error",
    "is-function",
    "is-map",
    "is-native-class",
    "is-null",
    "is-nullish",
    "is-number",
    "is-object",
    "is-plain-obj",
    "is-plain-object",
    "is-regexp",
    "is-string",
    "is-sync",
    "is-sync-function",
    "is-undefined",
    "is-weak-map",
    "isArguments",
    "isArray",
    "isAsyncFunction",
    "isBool",
    "isBoolean",
    "isClass",
    "isConventionalClass",
    "isDate",
    "isEmptyArray",
    "isEmptyKeys",
    "isEmptyMap",
    "isEmptyPlainObject",
    "isEmptyWeakMap",
    "isError",
    "isFunction",
    "isMap",
    "isNativeClass",
    "isNull",
    "isNullish",
    "isNumber",
    "isObject",
    "isRegExp",
    "isString",
    "isSync",
    "isSyncFunction",
    "isUndefined",
    "isWeakMap",
    "javascript",
    "javascript-type",
    "keys",
    "kind",
    "map",
    "module",
    "native",
    "native class",
    "native-class",
    "nativeClass",
    "node",
    "null",
    "number",
    "object",
    "plain",
    "plain object",
    "plain objects",
    "plain-object",
    "plain-objects",
    "plainObject",
    "primitive",
    "primitive-types",
    "pure",
    "regex",
    "regexp",
    "regular expression",
    "simple",
    "string",
    "sync",
    "syncFunction",
    "test",
    "type",
    "type-check",
    "type-checker",
    "type-checking",
    "typechecker",
    "typed",
    "typeguards",
    "typeof",
    "types",
    "typescript",
    "undefined",
    "util",
    "utility",
    "validate",
    "validation",
    "vanilla",
    "verify",
    "weak map",
    "weak-map",
    "weakMap",
    "what-type"
  ],
  "badges": {
    "list": [
      "githubworkflow",
      "npmversion",
      "npmdownloads",
      "daviddm",
      "daviddmdev",
      "---",
      "githubsponsors",
      "patreon",
      "flattr",
      "liberapay",
      "buymeacoffee",
      "opencollective",
      "crypto",
      "paypal",
      "wishlist"
    ],
    "config": {
      "githubWorkflow": "bevry",
      "githubSponsorsUsername": "balupton",
      "buymeacoffeeUsername": "balupton",
      "cryptoURL": "https://bevry.me/crypto",
      "flattrUsername": "balupton",
      "liberapayUsername": "bevry",
      "opencollectiveUsername": "bevry",
      "patreonUsername": "bevry",
      "paypalURL": "https://bevry.me/paypal",
      "wishlistURL": "https://bevry.me/wishlist",
      "githubUsername": "bevry",
      "githubRepository": "typechecker",
      "githubSlug": "bevry/typechecker",
      "npmPackageName": "typechecker"
    }
  },
  "funding": "https://bevry.me/fund",
  "author": "2013+ Bevry Pty Ltd <us@bevry.me> (http://bevry.me), 2011-2012 Benjamin Lupton <b@lupton.cc> (https://balupton.com)",
  "maintainers": [
    "Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)"
  ],
  "contributors": [
    "Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)",
    "Joe Gesualdo <joegesualdo@gmail.com> (https://github.com/joegesualdo)",
    "Matt Bierner (https://github.com/mjbvz)",
    "Sean Fridman <mail@seanfridman.com> (https://github.com/sfrdmn)"
  ],
  "bugs": {
    "url": "https://github.com/bevry/typechecker/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bevry/typechecker.git"
  },
  "engines": {
    "node": ">=10"
  },
  "editions": [
    {
      "description": "TypeScript source code with Import for modules",
      "directory": "source",
      "entry": "index.ts",
      "tags": [
        "source",
        "typescript",
        "import"
      ],
      "engines": false
    },
    {
      "description": "TypeScript compiled against ES2020 for web browsers with Import for modules",
      "directory": "edition-browsers",
      "entry": "index.js",
      "tags": [
        "compiled",
        "javascript",
        "import"
      ],
      "engines": {
        "node": false,
        "browsers": "defaults"
      }
    },
    {
      "description": "TypeScript compiled against ES2019 for Node.js 10 || 12 || 14 || 16 with Require for modules",
      "directory": "edition-es2019",
      "entry": "index.js",
      "tags": [
        "compiled",
        "javascript",
        "es2019",
        "require"
      ],
      "engines": {
        "node": "10 || 12 || 14 || 16",
        "browsers": false
      }
    },
    {
      "description": "TypeScript compiled against ES2019 for Node.js 12 || 14 || 16 with Import for modules",
      "directory": "edition-es2019-esm",
      "entry": "index.js",
      "tags": [
        "compiled",
        "javascript",
        "es2019",
        "import"
      ],
      "engines": {
        "node": "12 || 14 || 16",
        "browsers": false
      }
    },
    {
      "description": "TypeScript source code made to be compatible with Deno",
      "directory": "edition-deno",
      "entry": "index.ts",
      "tags": [
        "typescript",
        "import",
        "deno"
      ],
      "engines": {
        "deno": true,
        "browsers": true
      }
    }
  ],
  "types": "./compiled-types/",
  "type": "module",
  "main": "edition-es2019/index.js",
  "exports": {
    "node": {
      "import": "./edition-es2019-esm/index.js",
      "require": "./edition-es2019/index.js"
    },
    "browser": {
      "import": "./edition-browsers/index.js"
    }
  },
  "deno": "edition-deno/index.ts",
  "browser": "edition-browsers/index.js",
  "module": "edition-browsers/index.js",
  "devDependencies": {
    "@bevry/update-contributors": "^1.20.0",
    "@typescript-eslint/eslint-plugin": "^4.28.5",
    "@typescript-eslint/parser": "^4.28.5",
    "assert-helpers": "^8.4.0",
    "eslint": "^7.32.0",
    "eslint-config-bevry": "^3.27.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "^3.4.0",
    "kava": "^5.15.0",
    "make-deno-edition": "^1.3.0",
    "prettier": "^2.3.2",
    "projectz": "^2.22.0",
    "surge": "^0.23.0",
    "typedoc": "^0.23.17",
    "typescript": "4.3.5",
    "valid-directory": "^3.9.0",
    "valid-module": "^1.17.0"
  },
  "scripts": {
    "our:clean": "rm -Rf ./docs ./edition* ./es2015 ./es5 ./out ./.next",
    "our:compile": "npm run our:compile:deno && npm run our:compile:edition-browsers && npm run our:compile:edition-es2019 && npm run our:compile:edition-es2019-esm && npm run our:compile:types",
    "our:compile:deno": "make-deno-edition --attempt",
    "our:compile:edition-browsers": "tsc --module ESNext --target ES2020 --outDir ./edition-browsers --project tsconfig.json && ( test ! -d edition-browsers/source || ( mv edition-browsers/source edition-temp && rm -Rf edition-browsers && mv edition-temp edition-browsers ) )",
    "our:compile:edition-es2019": "tsc --module commonjs --target ES2019 --outDir ./edition-es2019 --project tsconfig.json && ( test ! -d edition-es2019/source || ( mv edition-es2019/source edition-temp && rm -Rf edition-es2019 && mv edition-temp edition-es2019 ) ) && echo '{\"type\": \"commonjs\"}' > edition-es2019/package.json",
    "our:compile:edition-es2019-esm": "tsc --module ESNext --target ES2019 --outDir ./edition-es2019-esm --project tsconfig.json && ( test ! -d edition-es2019-esm/source || ( mv edition-es2019-esm/source edition-temp && rm -Rf edition-es2019-esm && mv edition-temp edition-es2019-esm ) ) && echo '{\"type\": \"module\"}' > edition-es2019-esm/package.json",
    "our:compile:types": "tsc --project tsconfig.json --emitDeclarationOnly --declaration --declarationMap --declarationDir ./compiled-types && ( test ! -d compiled-types/source || ( mv compiled-types/source edition-temp && rm -Rf compiled-types && mv edition-temp compiled-types ) )",
    "our:deploy": "echo no need for this project",
    "our:meta": "npm run our:meta:contributors && npm run our:meta:docs && npm run our:meta:projectz",
    "our:meta:contributors": "update-contributors",
    "our:meta:docs": "npm run our:meta:docs:typedoc",
    "our:meta:docs:typedoc": "rm -Rf ./docs && typedoc --exclude '**/+(*test*|node_modules)' --excludeExternals --out ./docs ./source",
    "our:meta:projectz": "projectz compile",
    "our:release": "npm run our:release:prepare && npm run our:release:check-changelog && npm run our:release:check-dirty && npm run our:release:tag && npm run our:release:push",
    "our:release:check-changelog": "cat ./HISTORY.md | grep v$npm_package_version || (echo add a changelog entry for v$npm_package_version && exit -1)",
    "our:release:check-dirty": "git diff --exit-code",
    "our:release:prepare": "npm run our:clean && npm run our:compile && npm run our:test && npm run our:meta",
    "our:release:push": "git push origin && git push origin --tags",
    "our:release:tag": "export MESSAGE=$(cat ./HISTORY.md | sed -n \"/## v$npm_package_version/,/##/p\" | sed 's/## //' | awk 'NR>1{print buf}{buf = $0}') && test \"$MESSAGE\" || (echo 'proper changelog entry not found' && exit -1) && git tag v$npm_package_version -am \"$MESSAGE\"",
    "our:setup": "npm run our:setup:install",
    "our:setup:install": "npm install",
    "our:test": "npm run our:verify && npm test",
    "our:verify": "npm run our:verify:directory && npm run our:verify:eslint && npm run our:verify:module && npm run our:verify:prettier",
    "our:verify:directory": "valid-directory",
    "our:verify:eslint": "eslint --fix --ignore-pattern '**/*.d.ts' --ignore-pattern '**/vendor/' --ignore-pattern '**/node_modules/' --ext .mjs,.js,.jsx,.ts,.tsx ./source",
    "our:verify:module": "valid-module",
    "our:verify:prettier": "prettier --write .",
    "test": "node ./edition-es2019/test.js"
  },
  "eslintConfig": {
    "extends": [
      "bevry"
    ]
  },
  "prettier": {
    "semi": false,
    "singleQuote": true
  }
}